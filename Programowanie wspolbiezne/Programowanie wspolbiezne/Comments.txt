Just for me


void multiply_t(std::vector<std::vector<float>> &A, std::vector<std::vector<float>> &B, std::vector<std::vector<float>> &C, int nr_watk, int m, int p, int n)
{

	/*maceirze sa symetryczne najczesciej!*/
	/*jesli przyjmiemy ze macierze sa syumetryczne czyli w kazdej bedzie zawsze tyle samo elementow*/



	const int il_elementow = (m * p);
	const int il_operacji = il_elementow / ilosc_watkow;
	const int resz_operacji = il_elementow % ilosc_watkow;

	int start_op, end_op,z,y;
	// omp pharrel for schedulle, dynamic,static, guided
	//dynamiczny wlasny, musi byc sekcja krytyczna
	//sekcja krytyczna minimalna
	//synchornizacja watkow
	//semafor SO! zamiast tego l
	//mutex lock

	//15*4 + 8*5
		//100/23 = 4 r 8

	//mnozenie macierzy za pomoca omp
	//na poziomie watkow zaimplementowac omp
	//49 i 9 
	//for (z = resz_operacji; z != 0; z--) {
	//	y = ilosc_watkow / resz_operacji;
	//}

	

	if (nr_watk < il_elementow % ilosc_watkow) {
		start_op = il_operacji * nr_watk;
		end_op = (il_operacji * (nr_watk + 1)) + resz_operacji;
	}
	else {
		start_op = il_operacji * nr_watk + resz_operacji;
		end_op = (il_operacji * (nr_watk + 1)) + resz_operacji/*+1*/;
	}


	for (int op = start_op; op < end_op; op++) {
		const int row = op % m;
		const int col = op / m;

		float s = 0.0f;

		for (int i = 0; i < m; i++) {
			const float e1 = A[row][i];
			const float e2 = B[i][col];
			s += e1 * e2;

		}
		C[row][col] = s;
	}
}


std::vector<std::vector<float>> matrix;
std::vector<std::vector<float>> createMatrix(std::array<int, 2> shape)
{

	std::vector<float> mat;
	//#pragma omp for
	for (int j = 0; j < shape[1]; j++)
	{
		mat.push_back(0);
	}
	for (int i = 0; i < shape[0]; i++)
	{
		matrix.push_back(mat);
	}
	return matrix;
}